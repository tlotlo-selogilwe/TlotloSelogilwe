# ===== Task Manager Application =====
# Author: Tlotlo (Refactored Version)
# Description:
#   A command-line task manager that allows users to log in, add tasks,
#   view and manage their own tasks, and (for admin) view reports/statistics.

import datetime
from pathlib import Path

# ==== Constants ====
USER_FILE = Path("user.txt")
TASK_FILE = Path("tasks.txt")
TASK_REPORT = Path("task_overview.txt")
USER_REPORT = Path("user_overview.txt")

# ==== Global Variables ====
users = {}


# ==== Helper Functions ====

def load_users():
    """Load all registered users into a dictionary."""
    users.clear()
    if not USER_FILE.exists():
        print("No user file found. Please ensure user.txt exists.")
        return

    with USER_FILE.open("r") as file:
        for line in file:
            if ',' in line:
                username, password = line.strip().split(',', 1)
                users[username.strip().lower()] = password.strip()
            else:
                print(f"Skipping invalid line in user.txt: {line.strip()}")


def save_user(username, password):
    """Add a new user to user.txt."""
    with USER_FILE.open("a") as file:
        file.write(f"\n{username},{password}")
    users[username] = password


def validate_date(date_str):
    """Return True if date_str is valid YYYY-MM-DD format."""
    try:
        datetime.datetime.strptime(date_str, "%Y-%m-%d")
        return True
    except ValueError:
        return False


# ==== Core Functionalities ====

def reg_user():
    """Register a new user (admin only)."""
    print("\n=== Register New User ===")
    new_username = input("Username: ").strip().lower()
    if new_username in users:
        print("This username already exists. Please choose another.")
        return

    new_password = input("Password: ").strip()
    confirm = input("Confirm Password: ").strip()

    if new_password != confirm:
        print("Passwords do not match.")
        return

    save_user(new_username, new_password)
    print(f"User '{new_username}' registered successfully.")


def add_task():
    """Add a new task for a valid user."""
    print("\n=== Add Task ===")
    assigned_to = input("Assign task to: ").strip().lower()
    if assigned_to not in users:
        print("Error: User does not exist.")
        return

    title = input("Task Title: ").strip()
    description = input("Task Description: ").strip()
    due_date = input("Due Date (YYYY-MM-DD): ").strip()

    if not validate_date(due_date):
        print("Invalid date format. Please use YYYY-MM-DD.")
        return

    created_date = datetime.date.today().strftime("%Y-%m-%d")
    status = "No"

    with TASK_FILE.open("a") as file:
        file.write(f"{assigned_to},{title},{description},{due_date},{created_date},{status}\n")

    print(f"Task '{title}' assigned to '{assigned_to}' successfully.")


def view_all_tasks():
    """Display all tasks."""
    print("\n=== All Tasks ===")
    if not TASK_FILE.exists():
        print("No tasks found.")
        return

    with TASK_FILE.open("r") as file:
        for line in file:
            parts = [p.strip() for p in line.strip().split(',')]
            if len(parts) != 6:
                continue
            assigned_to, title, desc, due, created, complete = parts
            print(f"\nTitle       : {title}")
            print(f"Assigned To : {assigned_to}")
            print(f"Description : {desc}")
            print(f"Due Date    : {due}")
            print(f"Created On  : {created}")
            print(f"Completed   : {complete}")
            print("-" * 40)


def view_mine(current_user):
    """Display and manage tasks for the logged-in user."""
    print(f"\n=== My Tasks ({current_user}) ===")
    if not TASK_FILE.exists():
        print("No tasks found.")
        return

    with TASK_FILE.open("r") as file:
        tasks = [line.strip().split(',') for line in file.readlines() if line.strip()]

    my_tasks = [t for t in tasks if t[0].lower() == current_user.lower()]
    if not my_tasks:
        print("You have no assigned tasks.")
        return

    for i, t in enumerate(my_tasks, 1):
        print(f"\nTask {i}: {t[1]} | Due: {t[3]} | Completed: {t[5]}")
        print(f"Description: {t[2]}")
        print("-" * 40)

    try:
        task_num = int(input("Enter task number to update (or -1 to exit): "))
        if task_num == -1:
            return
        if not (1 <= task_num <= len(my_tasks)):
            print("Invalid selection.")
            return

        task = my_tasks[task_num - 1]
        if task[5].lower() == "yes":
            print("This task is already completed.")
            return

        print("1 - Mark as complete")
        print("2 - Edit assigned user or due date")
        choice = input("> ").strip()

        if choice == "1":
            task[5] = "Yes"
            print("Task marked complete.")
        elif choice == "2":
            new_user = input("New assigned user (leave blank to keep same): ").strip().lower()
            new_due = input("New due date (YYYY-MM-DD, blank to keep same): ").strip()

            if new_user:
                if new_user not in users:
                    print("User does not exist.")
                    return
                task[0] = new_user
            if new_due:
                if not validate_date(new_due):
                    print("Invalid date format.")
                    return
                task[3] = new_due
            print("Task updated successfully.")
        else:
            print("Invalid option.")

        # Update task file
        for idx, full_task in enumerate(tasks):
            if full_task[1] == task[1] and full_task[0] == current_user:
                tasks[idx] = task

        with TASK_FILE.open("w") as file:
            for t in tasks:
                file.write(",".join(t) + "\n")

    except ValueError:
        print("Please enter a valid number.")


def generate_reports():
    """Generate task and user overview reports."""
    if not TASK_FILE.exists():
        print("No tasks available for reporting.")
        return

    with TASK_FILE.open("r") as file:
        tasks = [line.strip().split(',') for line in file.readlines() if line.strip()]

    total_tasks = len(tasks)
    completed = [t for t in tasks if t[5].lower() == "yes"]
    incomplete = [t for t in tasks if t[5].lower() == "no"]

    overdue = [
        t for t in incomplete
        if validate_date(t[3]) and datetime.datetime.strptime(t[3], "%Y-%m-%d").date() < datetime.date.today()
    ]

    with TASK_REPORT.open("w") as tr:
        tr.write(f"Total tasks: {total_tasks}\n")
        tr.write(f"Completed tasks: {len(completed)}\n")
        tr.write(f"Incomplete tasks: {len(incomplete)}\n")
        tr.write(f"Overdue tasks: {len(overdue)}\n")
        tr.write(f"Percentage incomplete: {(len(incomplete)/total_tasks*100):.2f}%\n")
        tr.write(f"Percentage overdue: {(len(overdue)/total_tasks*100):.2f}%\n")

    # Per-user report
    user_summary = {}
    for user in users:
        user_tasks = [t for t in tasks if t[0] == user]
        if user_tasks:
            total = len(user_tasks)
            done = len([t for t in user_tasks if t[5].lower() == "yes"])
            overdue_u = len([
                t for t in user_tasks if t[5].lower() == "no" and validate_date(t[3]) and
                datetime.datetime.strptime(t[3], "%Y-%m-%d").date() < datetime.date.today()
            ])
            user_summary[user] = (total, done, overdue_u)
        else:
            user_summary[user] = (0, 0, 0)

    with USER_REPORT.open("w") as ur:
        for user, (total, done, overdue_u) in user_summary.items():
            ur.write(f"{user} - Total: {total}, Completed: {done}, Overdue: {overdue_u}\n")

    print("Reports generated successfully.")


def display_statistics():
    """Display report summaries."""
    if not TASK_REPORT.exists() or not USER_REPORT.exists():
        print("Reports missing. Generating...")
        generate_reports()

    print("\n=== Task Overview ===")
    print(TASK_REPORT.read_text())

    print("\n=== User Overview ===")
    print(USER_REPORT.read_text())


# ==== Main Program ====

def main():
    load_users()
    print("\nWelcome to the Task Manager!")

    # --- Login Loop ---
    current_user = None
    while not current_user:
        username = input("\nUsername: ").strip().lower()
        password = input("Password: ").strip()
        if username in users and users[username] == password:
            current_user = username
            print(f"\nWelcome, {username}!")
        else:
            print("Invalid credentials. Try again.")

    # --- Main Menu Loop ---
    while True:
        is_admin = current_user == "admin"
        print("\n=== Main Menu ===")
        print("a  - Add Task")
        print("va - View All Tasks")
        print("vm - View My Tasks")
        if is_admin:
            print("r  - Register User")
            print("gr - Generate Reports")
            print("ds - Display Statistics")
        print("e  - Exit")

        choice = input("> ").strip().lower()

        if choice == "a":
            add_task()
        elif choice == "va":
            view_all_tasks()
        elif choice == "vm":
            view_mine(current_user)
        elif choice == "r" and is_admin:
            reg_user()
        elif choice == "gr" and is_admin:
            generate_reports()
        elif choice == "ds" and is_admin:
            display_statistics()
        elif choice == "e":
            print("Goodbye!")
            break
        else:
            print("Invalid option. Try again.")


if __name__ == "__main__":
    main()
